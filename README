This library allows for defining class-level attributes whose values:
  * are inherited by subclasses,
  * can be overridden temporarily in threads without worrying about resetting to the original value,
  * are accessible via calls to "super",
  * are memory efficient: registry shrinks itself on nil values.

Example usage:
  class Resource
    class_inheritable_attr_accessor :site, :timeout
    
    def self.timeout
      super || 10
    end
    
    def self.timeout=(seconds)
      super(seconds.to_i)
    end
  end
  
  Resource.timeout  # => 10
  Resource.timeout = "5"
  Resource.timeout  # => 5
  
  class AccountingResource < Resource
    self.site = "http://account.example.com"
  end
  
  class Balance < AccountingResource
  end
  
  # Child's value defaults to parent's
  AccountingResource.site   # => "http://account.example.com"
  Balance.site              # => "http://account.example.com"
  
  # Child can set its own value
  Balance.site = "http://balance.account.example.com"
  AccountingResource.site   # => "http://account.example.com"
  Balance.site              # => "http://balance.account.example.com"
